import { GoogleGenAI } from '@google/genai';

export interface ValidationSuggestion {
  type: 'name' | 'description';
  field: string;
  original: string;
  suggested: string;
  reason: string;
}

export interface ValidationResponse {
  hasSuggestions: boolean;
  suggestions: ValidationSuggestion[];
}

export interface ProductValidationRequest {
  name: string;
  description?: string;
}

export class GeminiValidationService {
  private ai: GoogleGenAI;
  private model: string = 'gemini-2.0-flash-001';

  constructor(apiKey: string) {
    this.ai = new GoogleGenAI({ apiKey });
  }

  async validateProduct(data: ProductValidationRequest): Promise<ValidationResponse> {
    try {
      console.log('ü§ñ Starting Gemini validation for product:', {
        name: data.name,
        hasDescription: !!data.description
      });

      const prompt = this.buildValidationPrompt(data);
      
      const response = await this.ai.models.generateContent({
        model: this.model,
        contents: prompt,
        config: {
          temperature: 0.3,
          maxOutputTokens: 1000,
          responseMimeType: 'application/json'
        }
      });

      const responseText = response.text;
      if (!responseText) {
        console.log('‚ö†Ô∏è Empty response from Gemini');
        return { hasSuggestions: false, suggestions: [] };
      }

      console.log('üìù Raw Gemini response:', responseText);

      const parsed = JSON.parse(responseText);
      const validationResponse: ValidationResponse = {
        hasSuggestions: parsed.hasSuggestions || false,
        suggestions: parsed.suggestions || []
      };

      console.log('‚úÖ Gemini validation completed:', {
        hasSuggestions: validationResponse.hasSuggestions,
        suggestionsCount: validationResponse.suggestions.length
      });

      return validationResponse;

    } catch (error) {
      console.error('‚ùå Error in Gemini validation:', error);
      // Return empty suggestions on error to allow form submission to continue
      return { hasSuggestions: false, suggestions: [] };
    }
  }

  private buildValidationPrompt(data: ProductValidationRequest): string {
    return `Voc√™ √© um assistente especializado em melhorar listagens de produtos para e-commerce de roupas usadas (brech√≥) no Brasil.

Analise o nome e descri√ß√£o do produto fornecidos e sugira melhorias APENAS se necess√°rio:

PRODUTO:
Nome: "${data.name}"
Descri√ß√£o: "${data.description || ''}"

INSTRU√á√ïES:
1. Para o NOME do produto:
   - Verifique capitaliza√ß√£o (primeira letra de cada palavra importante em mai√∫scula)
   - Corrija erros gramaticais √≥bvios
   - Mantenha o estilo brasileiro e informal quando apropriado
   - N√ÉO mude o significado ou adicione informa√ß√µes que n√£o est√£o no original

2. Para a DESCRI√á√ÉO do produto:
   - Corrija erros gramaticais e de digita√ß√£o
   - Melhore a clareza e fluidez do texto
   - Mantenha o tom e estilo original
   - N√ÉO adicione informa√ß√µes que n√£o est√£o no texto original
   - N√ÉO mude o significado

3. REGRAS IMPORTANTES:
   - Apenas sugira mudan√ßas se houver problemas √≥bvios (erros, capitaliza√ß√£o incorreta)
   - Se o texto est√° bom, retorne hasSuggestions: false
   - Seja conservador - prefira n√£o sugerir a sugerir mudan√ßas desnecess√°rias
   - Mantenha a personalidade e estilo do vendedor

RESPOSTA OBRIGAT√ìRIA EM JSON:
{
  "hasSuggestions": boolean,
  "suggestions": [
    {
      "type": "name" | "description",
      "field": "name" | "description",
      "original": "texto original",
      "suggested": "texto melhorado",
      "reason": "explica√ß√£o da melhoria em portugu√™s"
    }
  ]
}

Responda APENAS com o JSON, sem texto adicional:`;
  }
}