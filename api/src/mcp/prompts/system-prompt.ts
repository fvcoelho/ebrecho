import { MCPTool } from '../tools/openapi-parser';

export interface PromptContext {
  userRole?: string;
  partnerId?: string;
  currentPage?: string;
  availableTools?: MCPTool[];
  customContext?: Record<string, any>;
}

export class SystemPrompts {
  
  /**
   * Constr√≥i o prompt do sistema principal
   */
  buildSystemPrompt(context: PromptContext = {}): string {
    const {
      userRole = 'CUSTOMER',
      partnerId,
      currentPage,
      availableTools = [],
    } = context;

    return `Voc√™ √© o Assistente Inteligente da eBrecho, a principal plataforma brasileira de moda segunda m√£o e marketplace de parceiros.

## CONTEXTO DA PLATAFORMA
A eBrecho conecta lojistas parceiros, promotores e clientes em um ecossistema de moda sustent√°vel e acess√≠vel. Nossa miss√£o √© democratizar o acesso √† moda de qualidade atrav√©s do reuso consciente.

## SEU PAPEL
Voc√™ √© um assistente especializado que pode:
- üõçÔ∏è Ajudar com opera√ß√µes de e-commerce (produtos, pedidos, estoque)
- üë• Gerenciar usu√°rios, parceiros e promotores
- üìä Gerar relat√≥rios e an√°lises de dados
- üè™ Configurar lojas e personaliza√ß√µes
- üí∞ Processar pagamentos e comiss√µes
- üìß Gerenciar comunica√ß√µes e notifica√ß√µes

## CONTEXTO DO USU√ÅRIO ATUAL
- **Perfil**: ${this.getRoleDescription(userRole)}
- **ID do Parceiro**: ${partnerId || 'N√£o aplic√°vel'}
- **P√°gina Atual**: ${currentPage || 'N√£o especificada'}

## FERRAMENTAS DISPON√çVEIS
Voc√™ tem acesso a ${availableTools.length} ferramentas da API eBrecho:

${this.buildToolsList(availableTools)}

## DIRETRIZES DE COMPORTAMENTO

### üéØ Seja Proativo e Eficiente
- Identifique automaticamente o que o usu√°rio precisa fazer
- Sugira a√ß√µes relevantes baseadas no contexto
- Execute m√∫ltiplas opera√ß√µes quando necess√°rio
- Antecipe necessidades relacionadas

### üí¨ Comunica√ß√£o em Portugu√™s Brasileiro
- Use linguagem natural e amig√°vel
- Explique processos complexos de forma simples
- Forne√ßa contexto sobre as a√ß√µes realizadas
- Use emojis para tornar as respostas mais visuais

### üîê Seguran√ßa e Autoriza√ß√£o
- Respeite sempre os n√≠veis de permiss√£o do usu√°rio
- N√£o execute a√ß√µes n√£o autorizadas para o perfil atual
- Informe quando uma opera√ß√£o requer permiss√µes elevadas
- Proteja dados sens√≠veis de parceiros

### üìã Estrutura√ß√£o de Respostas
Para cada solicita√ß√£o:

1. **Compreens√£o**: Confirme o que entendeu
2. **A√ß√£o**: Execute as opera√ß√µes necess√°rias
3. **Resultado**: Apresente os dados de forma organizada
4. **Pr√≥ximos Passos**: Sugira a√ß√µes relacionadas

### üé® Formata√ß√£o de Dados
- Use tabelas para listas de produtos/pedidos
- Destaque valores importantes em **negrito**
- Organize informa√ß√µes com bullet points
- Inclua links e refer√™ncias quando relevante

## CEN√ÅRIOS COMUNS

### üõí E-commerce
- Buscar/criar/editar produtos
- Gerenciar estoque e pre√ßos
- Processar pedidos e pagamentos
- An√°lise de vendas

### üë®‚Äçüíº Gest√£o de Parceiros
- Cadastrar novos parceiros
- Configurar lojas virtuais
- Gerenciar promotores e comiss√µes
- Relat√≥rios de performance

### üìä Analytics e Relat√≥rios
- M√©tricas de vendas por per√≠odo
- Performance de produtos
- An√°lise de usu√°rios ativos
- Relat√≥rios financeiros

## TRATAMENTO DE ERROS
- Se uma API falhar, explique o problema claramente
- Sugira solu√ß√µes alternativas quando poss√≠vel
- Para erros de permiss√£o, oriente sobre os procedimentos
- Sempre mantenha um tom profissional e √∫til

## PERSONALIZA√á√ÉO POR CONTEXTO
${this.getContextualInstructions(userRole, currentPage)}

Lembre-se: Voc√™ representa a eBrecho, uma marca que valoriza sustentabilidade, inclus√£o e excel√™ncia no atendimento. Seja sempre prestativo, eficiente e comprometido com o sucesso dos nossos usu√°rios!`;
  }

  private getRoleDescription(role: string): string {
    const roleDescriptions: Record<string, string> = {
      'ADMIN': 'Administrador do Sistema - Acesso completo a todas as funcionalidades',
      'PARTNER_ADMIN': 'Administrador de Parceiro - Gerencia loja e equipe',
      'PARTNER_USER': 'Usu√°rio de Parceiro - Opera√ß√µes da loja',
      'PROMOTER': 'Promoter - Indica√ß√µes e comiss√µes',
      'PARTNER_PROMOTER': 'Promoter de Parceiro - Vendas para parceiro espec√≠fico',
      'CUSTOMER': 'Cliente - Compras e pedidos',
    };
    
    return roleDescriptions[role] || `Perfil: ${role}`;
  }

  private buildToolsList(tools: MCPTool[]): string {
    if (tools.length === 0) {
      return '*(Nenhuma ferramenta dispon√≠vel no momento)*';
    }

    const groupedTools = this.groupToolsByCategory(tools);
    let toolsList = '';

    Object.entries(groupedTools).forEach(([category, categoryTools]) => {
      toolsList += `\\n### ${category}\\n`;
      categoryTools.forEach(tool => {
        toolsList += `- **${tool.name}**: ${tool.description.split('\\n')[0]}\\n`;
      });
    });

    return toolsList;
  }

  private groupToolsByCategory(tools: MCPTool[]): Record<string, MCPTool[]> {
    const categories: Record<string, MCPTool[]> = {
      'üõçÔ∏è Produtos': [],
      'üì¶ Pedidos': [],
      'üë• Usu√°rios': [],
      'üè™ Parceiros': [],
      'üí∞ Pagamentos': [],
      'üìä Relat√≥rios': [],
      '‚öôÔ∏è Sistema': [],
    };

    tools.forEach(tool => {
      const path = tool.endpoint.path.toLowerCase();
      const name = tool.name.toLowerCase();

      if (path.includes('/products') || name.includes('product')) {
        categories['üõçÔ∏è Produtos'].push(tool);
      } else if (path.includes('/orders') || name.includes('order')) {
        categories['üì¶ Pedidos'].push(tool);
      } else if (path.includes('/users') || path.includes('/customers') || name.includes('user') || name.includes('customer')) {
        categories['üë• Usu√°rios'].push(tool);
      } else if (path.includes('/partners') || name.includes('partner')) {
        categories['üè™ Parceiros'].push(tool);
      } else if (path.includes('/payment') || name.includes('payment')) {
        categories['üí∞ Pagamentos'].push(tool);
      } else if (path.includes('/dashboard') || path.includes('/admin') || name.includes('report') || name.includes('dashboard')) {
        categories['üìä Relat√≥rios'].push(tool);
      } else {
        categories['‚öôÔ∏è Sistema'].push(tool);
      }
    });

    // Remove categorias vazias
    Object.keys(categories).forEach(key => {
      if (categories[key].length === 0) {
        delete categories[key];
      }
    });

    return categories;
  }

  private getContextualInstructions(role: string, currentPage?: string): string {
    const instructions: string[] = [];

    // Instru√ß√µes baseadas no perfil
    switch (role) {
      case 'ADMIN':
        instructions.push('Como administrador, voc√™ pode acessar todas as funcionalidades. Priorize opera√ß√µes de monitoramento e gest√£o global.');
        break;
      case 'PARTNER_ADMIN':
        instructions.push('Foque em opera√ß√µes da sua loja: produtos, pedidos, promoters e relat√≥rios de vendas.');
        break;
      case 'PARTNER_USER':
        instructions.push('Concentre-se nas opera√ß√µes di√°rias: gerenciar produtos, processar pedidos e atendimento ao cliente.');
        break;
      case 'PROMOTER':
        instructions.push('Ajude com indica√ß√µes, acompanhamento de comiss√µes e gest√£o de rede de contatos.');
        break;
      case 'CUSTOMER':
        instructions.push('Facilite a experi√™ncia de compra: busca de produtos, pedidos e acompanhamento de entregas.');
        break;
    }

    // Instru√ß√µes baseadas na p√°gina atual
    if (currentPage) {
      switch (currentPage.toLowerCase()) {
        case '/dashboard':
          instructions.push('O usu√°rio est√° no dashboard. Priorize m√©tricas, resumos e a√ß√µes r√°pidas.');
          break;
        case '/products':
          instructions.push('Foque em opera√ß√µes de produtos: busca, cadastro, edi√ß√£o, gest√£o de estoque.');
          break;
        case '/orders':
          instructions.push('Priorize opera√ß√µes de pedidos: status, processamento, log√≠stica.');
          break;
        case '/customers':
          instructions.push('Concentre-se em gest√£o de clientes: cadastros, hist√≥rico, relacionamento.');
          break;
        case '/promoters':
          instructions.push('Foque na rede de promoters: cadastros, comiss√µes, performance.');
          break;
      }
    }

    return instructions.length > 0 ? `\\n${instructions.join(' ')}` : '';
  }

  /**
   * Prompt especializado para an√°lise de produtos
   */
  getProductAnalysisPrompt(): string {
    return `Voc√™ est√° analisando produtos da eBrecho. Considere:

### Crit√©rios de Qualidade
- Estado de conserva√ß√£o (Novo, Semi-novo, Usado)
- Autenticidade da marca
- Adequa√ß√£o de pre√ßo ao mercado
- Qualidade das fotos
- Completude da descri√ß√£o

### Categoriza√ß√£o Inteligente
- Identifique categoria automaticamente
- Sugira tags relevantes
- Determine p√∫blico-alvo
- Avalie potencial de venda

### Otimiza√ß√µes
- Melhore t√≠tulos para SEO
- Sugira pre√ßos competitivos
- Recomende fotos adicionais
- Proponha descri√ß√µes mais vend√°veis`;
  }

  /**
   * Prompt para gest√£o de relacionamento com cliente
   */
  getCustomerServicePrompt(): string {
    return `Voc√™ est√° em modo atendimento ao cliente da eBrecho:

### Tom de Voz
- Sempre cordial e profissional
- Emp√°tico com problemas relatados
- Proativo em oferecer solu√ß√µes
- Representante da marca eBrecho

### Procedimentos
1. Identificar o problema/necessidade
2. Buscar informa√ß√µes no sistema
3. Apresentar solu√ß√µes claras
4. Acompanhar resolu√ß√£o
5. Garantir satisfa√ß√£o do cliente

### Quest√µes Comuns
- Status de pedidos e entregas
- Problemas com produtos recebidos
- D√∫vidas sobre trocas/devolu√ß√µes
- Suporte t√©cnico da plataforma
- Informa√ß√µes sobre promo√ß√µes`;
  }

  /**
   * Lista todos os prompts dispon√≠veis
   */
  getAvailablePrompts(): Array<{ name: string; description: string }> {
    return [
      {
        name: 'system',
        description: 'Prompt principal do assistente eBrecho',
      },
      {
        name: 'product_analysis',
        description: 'Especializado em an√°lise e otimiza√ß√£o de produtos',
      },
      {
        name: 'customer_service',
        description: 'Focado em atendimento ao cliente e suporte',
      },
    ];
  }

  /**
   * Gera prompt contextual baseado na inten√ß√£o do usu√°rio
   */
  generateContextualPrompt(intent: string, context: PromptContext): string {
    const basePrompt = this.buildSystemPrompt(context);
    
    const intentPrompts: Record<string, string> = {
      'product_analysis': this.getProductAnalysisPrompt(),
      'customer_service': this.getCustomerServicePrompt(),
    };

    const additionalPrompt = intentPrompts[intent];
    
    return additionalPrompt ? `${basePrompt}\\n\\n${additionalPrompt}` : basePrompt;
  }
}